import Data.List (sortBy)

-- HC1T1 - Task 1: Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double

-- HC1T2 - Task 2: Pure Function Example
circleArea :: Floating a => a -> a
circleArea r = pi * r * r

-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18

-- HC1T4 - Task 4: Composing a Function to Process Player Data
type Player = (String, Int)

extractPlayers :: [Player] -> [String]
extractPlayers players = map fst players

sortByScore :: [Player] -> [Player]
sortByScore = sortBy (\(_, score1) (_, score2) -> compare score2 score1)

topThree :: [Player] -> [Player]
topThree = take 3

getTopThreePlayers :: [Player] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Int]
infiniteNumbers = [1..]

firstN :: Int -> [Int]
firstN n = take n infiniteNumbers

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y

-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Floating a => a -> a
fToC f = (f - 32) * 5 / 9

-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Main function to test everything
main :: IO ()
main = do
  putStrLn "HC1T1 - doubleThenIncrement of 3:"
  print (doubleThenIncrement 3) -- (3*2)+1 = 7

  putStrLn "\nHC1T2 - circleArea with radius 5:"
  print (circleArea 5) -- pi * 25

  putStrLn "\nHC1T3 - greaterThan18 check on 20 and 15:"
  print (greaterThan18 20) -- True
  print (greaterThan18 15) -- False

  putStrLn "\nHC1T4 - getTopThreePlayers:"
  let players = [("Alice", 50), ("Bob", 80), ("Charlie", 70), ("Diana", 90)]
  print (getTopThreePlayers players)

  putStrLn "\nHC1T5 - first 10 infinite numbers:"
  print (firstN 10)

  putStrLn "\nHC1T6 - addNumbers 7 and 8:"
  print (addNumbers 7 8)

  putStrLn "\nHC1T7 - Convert 100F to Celsius:"
  print (fToC 100)

  putStrLn "\nHC1T8 - applyTwice (*2) to 5:"
  print (applyTwice (*2) 5) -- (5*2)*2 = 20
